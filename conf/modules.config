/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    // publishDir = [
    //     path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
    //     mode: params.publish_dir_mode,
    //     saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    // ]

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/REPORTS" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                filename.equals('versions.yml') ? null :
                filename.equals('multiqc_report.html') ? "multiqc_report.html" : null
            }
        ]
    }

    withName: 'SAMNSORTER' {
        publishDir = [
            path: { "${params.outdir}/SORT_RESULTS/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: 'samnsorter_res.tsv',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PPSKETCHLIB_DIST' {
        errorStrategy = 'ignore'
    }

    withName: 'PARSE_DIST' {
        publishDir = [
            path: { "${params.outdir}/SEARCH_RESULTS/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'DIST2NGBRS' {
        publishDir = [
            path: { "${params.outdir}/SEARCH_RESULTS/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                filename.equals('versions.yml') ? null :
                filename.equals('SamnTrek_hits.txt') ? "${meta.id}.hits" : filename
            }
        ]
        ext.args = "--distance ${params.distance} \
                    --prefilter ${params.prefilter_dist} \
                    --minPts ${params.cluster_opt}\
                    --subsample ${params.cluster_subsample} \
                    --top_hits ${params.top_hits}"
    }

    withName: 'DB_FETCH' {
        ext.args = { "https://object-arbutus.cloud.computecanada.ca/cidgohshare/eagle/jimmyliu/SamnTrek/\$version/db.tar.gz" }
    }
    withName: 'DB_UNTAR' {
        ext.prefix = { "${db_path}/\$version" }
        ext.args   = "--no-overwrite-dir "
    }
    withName: 'NCBIDATASETS_DOWNLOAD' {
        maxForks = 1
        ext.args = "genome accession \
                    --assembly-source GenBank \
                    --dehydrated \
                    --include genome"
    }
    withName: 'NCBIDATASETS_REHYDRATE' {
        maxForks = 1
        publishDir = [
            path: { "${params.outdir}/PD_GENOMES" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                filename.equals('versions.yml') ? null :
                filename.replaceAll('.*\\/', '')
            }
        ]
    }
    withName: 'MERGE_SUMMARY' {
        publishDir = [
            path: { "${params.outdir}/SUMMARY" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MASHTREE' {
        publishDir = [
            path: { "${params.outdir}/TREE" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                filename.equals('versions.yml') ? null :
                filename.contains('dnd') ? 'SamnTrek_mash_tree.nwk' :
                filename.contains('tsv') ? 'SamnTrek_mash_distance_matrix.tsv' : filename
            }
        ]
    }
    withName: 'CHEWBBACA_ALLELECALL' {
        ext.args = { "--ptf /enterobase_senterica_cgmlst_3.2.2/Salmonella_enterica.trn \
                     --hash-profiles sha1 \
                     --no-inferred"
        }
    }
    withName: 'SAMNTREK:CONTEXTUALIZE:MERGE_DELIM*' {
        publishDir = [
            path: { "${params.outdir}/TREE" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                filename.equals('versions.yml') ? null : filename
                // filename.equals('results_alleles_hashed.tsv') ? 'SamnTrek_cgmlst_alleles_hashed.tsv' : filename
                // filename.equals('results_alleles_hashed.tsv') ? 'SamnTrek_cgmlst_alleles_hashed.tsv' : filename
            }
        ]
    }
    withName: 'CGMLST_DISTS' {
        publishDir = [
            path: { "${params.outdir}/TREE" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                filename.equals('versions.yml') ? null :
                filename.contains('phylip') ? null :
                filename.contains('tsv') ? 'SamnTrek_cgMLST_distance_matrix.tsv' : filename
            }
        ]
        ext.args = "-H"
        ext.prefix   = "distance_matrix"
    }
    withName: 'RAPIDNJ' {
        publishDir = [
            path: { "${params.outdir}/TREE" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                filename.equals('versions.yml') ? null :
                filename.contains('nwk') ? 'SamnTrek_cgMLST_tree.nwk' : filename
            }
        ]
        ext.args = "-i pd"
        ext.prefix   = "distance_matrix"
    }

}
